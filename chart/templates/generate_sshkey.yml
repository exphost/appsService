{{- if and (not .Values.git_repo.sshkey.key) (not .Values.git_repo.sshkey.secret) }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: appsservice-ssh-generator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: appsservice-ssh-generator
rules:
- apiGroups: ["*"]
  resources: ["secrets"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: appsservice-ssh-generator
subjects:
- kind: ServiceAccount
  name: appsservice-ssh-generator
roleRef:
  kind: Role
  name: appsservice-ssh-generator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "chart.fullname" . }}-sshkey
spec:
  template:
    spec:
      serviceAccountName: appsservice-ssh-generator
      restartPolicy: Never
      volumes:
      - name: sshkey
        emptyDir: {}
      containers:
      - name: ssh-gen
        image: alpine
        command:
          - /bin/sh
          - -c
          - 'apk add openssh && ssh-keygen -f /key/key_rsa -N "" && chmod 666 /key/*'
        volumeMounts:
        - name: sshkey
          mountPath: /key
      - name: create-creator
        image: bitnami/kubectl:latest
        command:
          - /bin/sh
          - -c
          - 'while [ ! -e /key/key_rsa ]; do echo "waiting for /key/key_rsa"; sleep 1; done; kubectl create secret generic {{ include "chart.fullname" . }}-sshkey --from-file=ssh-publickey=/key/key_rsa.pub --from-file=ssh-privatekey=/key/key_rsa'
        volumeMounts:
        - name: sshkey
          mountPath: /key
{{- end }}
